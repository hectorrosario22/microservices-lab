services:
  # ------------------------------------------------------------------
  # 1. INFRAESTRUCTURA (Bases de Datos y Broker)
  # ------------------------------------------------------------------

  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    ports:
      # Puerto de gestión (opcional para ver la interfaz)
      - "15672:15672"
    networks:
      - msl-net

  # Base de Datos NoSQL para autenticación
  authdb:
    image: mongo:latest
    container_name: auth-mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    volumes:
      - msl_auth_data:/data/db
    networks:
      - msl-net

  # Interfaz web para MongoDB (opcional)
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081" 
    environment:
      # Usar URL completa de conexión (más compatible)
      ME_CONFIG_MONGODB_URL: mongodb://admin:admin@authdb:27017/admin
      
      # Autenticación de la UI de Mongo Express (para acceder a localhost:8081)
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
    networks:
      - msl-net
    depends_on:
      - authdb

  # Base de Datos SQL (Compartida)
  postgresdb:
    image: postgres:18-alpine
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: ecommercedb
    volumes:
      - msl_postgres_data:/var/lib/postgresql/data
    networks:
      - msl-net

  maildev:
    image: maildev/maildev
    container_name: maildev
    ports:
      # Puerto 1080: Interfaz Web para ver correos
      - "1080:1080" 
      # Puerto 1025: Servidor SMTP simulado
      - "1025:1025" 
    networks:
      - msl-net
    
  # ------------------------------------------------------------------
  # 2. MICROSERVICIOS (.NET)
  # ------------------------------------------------------------------

  # API 1: Autenticación (Pública)
  auth-api:
    container_name: auth-api
    build:
      context: .
      dockerfile: Auth.Api/Dockerfile
    ports:
      - "8000:80"
    environment:
      ASPNETCORE_ENVIRONMENT: Development
    networks:
      - msl-net
    depends_on:
      - authdb

  # API 2: Pedidos (Pública/Protegida)
  order-api:
    container_name: order-api
    build:
      context: ./Order.Api
      dockerfile: Dockerfile
    ports:
      - "8001:80"
    networks:
      - msl-net
    depends_on:
      - postgresdb
      - rabbitmq
      - auth-api

  # Worker 1: Inventario (Consumidor)
  inventory-worker:
    container_name: inventory-worker
    build:
      context: ./Inventory.Worker
      dockerfile: Dockerfile
    networks:
      - msl-net
    # No expone puertos. Solo se comunica internamente con BD y RabbitMQ.
    depends_on:
      - postgresdb
      - rabbitmq

  # Worker 2: Notificaciones (Consumidor)
  notification-worker:
    container_name: notification-worker
    build:
      context: .
      dockerfile: Notification.Worker/Dockerfile
    networks:
      - msl-net
    # No expone puertos. Solo se comunica internamente con RabbitMQ.
    depends_on:
      - rabbitmq

# ------------------------------------------------------------------
# 3. REDES Y VOLÚMENES
# ------------------------------------------------------------------
networks:
  msl-net:
    driver: bridge # Red interna para que los contenedores se vean por nombre

volumes:
  msl_auth_data:
  msl_postgres_data: